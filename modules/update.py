#! /usr/bin/env nix-shell
#! nix-shell -p python3 -i python3
import html
import json
import os
import urllib.request as ureq
import rtoml


def fetch(url):
    with ureq.urlopen(url) as request:
        return json.loads(request.read())


def storejson(path, object):
    with open(path, "w", encoding="utf-8") as file:
        json.dump(object, file, indent=2, ensure_ascii=False)
        file.write("\n")


def slice(dict, keys):
    return {key: html.unescape(dict[key]) for key in keys}


def nest_key(d, key, value):
    parts = key.replace("-", "_").split("_")
    current = d
    for i, part in enumerate(parts):
        formatted = part.capitalize() if i < 1 else part
        if i == len(parts) - 1:
            current[formatted] = value
        else:
            if formatted not in current:
                current[formatted] = {}
            current = current[formatted]


if __name__ == "__main__":
    repo = "ryanoasis/nerd-fonts"
    release_url = f"https://api.github.com/repos/{repo}/releases/latest"
    glyphs_url_template = (
        f"https://raw.githubusercontent.com/{repo}/refs/tags/{{}}/glyphnames.json"
    )
    sha256_url_template = (
        f"https://github.com/{repo}/releases/download/{{}}/SHA-256.txt"
    )

    release_info_fname = "release.json"
    checksums_fname = "checksums.json"
    glyphs_info_fname = "icons.toml"

    release_info = slice(fetch(release_url), ["tag_name"])
    tag = release_info["tag_name"]

    with open(release_info_fname, "r", encoding="utf-8") as file:
        existing_tag = json.load(file)["tag_name"]
    if tag == existing_tag:
        raise Exception("no newer version available")

    os.chdir(os.path.join(os.path.dirname(os.path.abspath(__file__)), "manifests"))

    print("Generating manifests...")
    print(
        json.dumps(
            [
                {
                    "attrPath": "nerdy",
                    "oldVersion": existing_tag.removeprefix("v"),
                    "newVersion": tag.removeprefix("v"),
                }
            ],
            indent=2,
        )
    )

    storejson(release_info_fname, release_info)
    storejson(
        checksums_fname,
        {
            filename: sha256
            for row in ureq.urlopen(sha256_url_template.format(tag))
            for sha256, filename in [row.decode("utf-8").split()]
            if filename.endswith(".tar.xz")
        },
    )

    glyphs = fetch(glyphs_url_template.format(tag))
    del glyphs["METADATA"]

    nested_glyphs = {}

    for full_key, info in glyphs.items():
        if "char" in info:
            nest_key(nested_glyphs, full_key, info["char"])

    with open(glyphs_info_fname, "w", encoding="utf-8") as file:
        file.write("# This file was generated by nerdy and will be overwritten" + "\n")
        rtoml.dump(nested_glyphs, file)
